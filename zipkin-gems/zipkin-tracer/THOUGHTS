- make sure that client middleware doesn't bomb out if ::Trace isn't defined 
    if it's used in an app with no zipkin then it shouldn't bomb out.
- make handlers for rack-client and faraday and abstract that shit away?

## specs
- just use a script to start up the apps to ensure good seperation. use the *.ru files.
- think of test/use case examples that cover the most amount of test opportunities, make good tests and start asserting the fuck.

## threads
- is thread ok coupled between client-server ....?
- backgrounding job stuff...forking doesn't pass threads. make sure this works.
- is using threads ok for unicorn? for other types of servers...?
- 











# main assertions need to do figure 2 in
# http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/pubs/archive/36356.pdf
#
# SHARED:
# =======
#
# assert that we have client start, server recv, server send, client receive, http uri/method, annotations in spans.
#
## WEB OF API REQUESTS TO SIMULATE:
# =================================
#
# => /first_app/norpc
#
# assert a single span in a trace, with no parent id (but still has the shared attribute annotations as above)
#
# => /first_app/simple
#   => /third_app/end
#
# assert that all the annotations we have should coorelate to two spans: one span for '/simple' and another for '/end'
# assert trace id is the same for both spans and belong to it
# assert the first span has no parent id, second span has a parent id of the first.
#
# => /first_app/start
#   => /second_app/continue
#     => /first_app/end
#     => /third_app/continue
#       => /first_app/end
#  
# assert there are 5 spans in this one trace. all have same trace_id: ( num below really just a hex code)
# span: /first_app/start, parent_id=nil, span_id=1
# span: /second_app/continue, parent_id=1, span_id=2
# span: /first_app/end, parent_id=2, span_id=3
# span: /third_app/continue, parent_id=2, span_id=4
# span: /first_app/end, parent_id=4, span_id=5


